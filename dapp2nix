#!/usr/bin/env bash
set -eo pipefail
shopt -s lastpipe

export getSpec='rev=$(git rev-parse HEAD); \
fullref=$(git for-each-ref --contains $rev | sed -n "s/^.*refs\/\(heads\|remotes\/\)//p" | sort -k1.1,1.1 -rs | head -n1); \
remote=${fullref%/*}; remote=${remote:-origin};
ref=${fullref#*/}; \
url=$(git remote get-url $remote | sed "s/\(\.git\|\/\)$//"); \
alias=${url##*/}; con=${alias}_${rev::7}; '

submods() {
  git submodule --quiet foreach --recursive \
    "$getSpec"'printf %s\\n "$PWD $con"' \
    | sort -k2 -u
}
export -f submods

subdeps() {
  git submodule --quiet foreach "$getSpec"'printf %s "
        $alias = $con;"'
}
export -f subdeps

spec() {
  (cd "$1"
    eval "$getSpec"
    deps=$(subdeps)
    name=$alias-${rev::7}
    printf %s "
    $con = rec {
      name = \"$alias\";
      deps = {$deps
      };
      repo' = {
        name = \"$name-source\";
        url = \"$url\";
        rev = \"$rev\";
        ref = \"${ref#refs/remotes/*/}\";
      };
      src' = fetchGit repo';
      src = \"\${src'}/src\";
    };"
  )
}
export -f spec

specs() {
  eval "$getSpec"

  local repos; repos="$1
$PWD $con"
  local root; root=$(realpath .)
  local dest; dest=$(realpath --relative-to="$2" "$root")

  printf %s "
  specs = rec {"

  cut -d " " -f1 <<<"$repos" | while read -r path; do
    if [[ $path == "$root" ]]; then
      printf %s "
    $alias = rec {
      name = \"$alias\";
      deps = {$(subdeps)
      };
      src' = ${dest}/.;
      src = ${dest}/src;
    };
    this = $alias;"
    else
      spec "$path"
    fi
  done

  printf %s "
  };"
}
export -f specs

main() {
  local repos; repos=$(submods)
  local dest; dest="$1"

  [ -n "$repos" ] || { echo >&2 'Submodules not initiated? Run: `git submodule update --init --recursive`'; exit 1; }

  printf %s "# This file has been generated by dapp2nix ${DAPP2NIX_VERSION:-unknown}, do not edit.

{ solidityPackage, solc, dapp2 }:

let
  inherit (builtins) map listToAttrs attrNames attrValues;
  mapAttrs = if (builtins ? mapAttrs)
    then builtins.mapAttrs
    else f: attrs:
      listToAttrs (map
        (name: { inherit name; value = f name attrs.\"\${name}\"; })
        (attrNames attrs));

  defaults = {
    inherit solc;
    test-hevm = dapp2.test-hevm;
    doCheck = true;
  };

  package = spec: let
    spec' = defaults // (removeAttrs spec [ \"repo'\" \"src'\" ]);
    deps = map (spec:
      package (spec // { inherit (spec') solc test-hevm doCheck; })
    ) (attrValues spec'.deps);
  in solidityPackage (spec' // { inherit deps; });

  packageSpecs = mapAttrs (_: package);
"

  specs "$repos" "$dest"

  printf %s "
in {
  inherit package packageSpecs specs;
  this = package specs.this;
  deps = packageSpecs specs.this.deps;
  version = \"${DAPP2NIX_VERSION:-unknown}\";
}
"
}

outPath=${1:-./dapp.nix}
main "$(dirname "$(realpath "$outPath")")" > "$outPath"
